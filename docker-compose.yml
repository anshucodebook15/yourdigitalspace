name: yds

services:
  mongo:
    image: mongo:7
    container_name: yds-mongo
    restart: always
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
    volumes:
      - yds_data_volumn:/data/db
    networks:
      - yds-docker
    healthcheck:
      test:
        [
          "CMD",
          "mongosh",
          "--username",
          "root",
          "--password",
          "example",
          "--authenticationDatabase",
          "admin",
          "--eval",
          "db.adminCommand('ping')",
        ]
      interval: 10s
      timeout: 5s
      retries: 5

  mongo-express:
    image: mongo-express
    container_name: yds-mongo-express
    restart: always
    ports:
      - "8081:8081"
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: example
      ME_CONFIG_MONGODB_SERVER: mongo
    depends_on:
      mongo:
        condition: service_healthy
    networks:
      - yds-docker

  backend:
    build:
      context: ./backend_yds
      dockerfile: Dockerfile # your NestJS backend Dockerfile
    container_name: yds-backend
    restart: always
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: production

    depends_on:
      mongo:
        condition: service_healthy
    networks:
      - yds-docker

  frontend:
    build:
      context: ./frontend_yds # where your frontend Dockerfile is
      dockerfile: Dockerfile
    container_name: yds-frontend
    ports:
      - "5173:5173" # ðŸ‘ˆ React/Vite/Next app exposed here
    restart: unless-stopped
    depends_on:
      - backend # ðŸ‘ˆ ensure backend is up first
    networks:
      - yds-docker

volumes:
  yds_data_volumn:

networks:
  yds-docker:
    driver: bridge
