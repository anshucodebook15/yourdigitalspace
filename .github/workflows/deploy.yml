name: 🧪 Test SSH to GCP VM

on:
    push:
        branches: [main]
    workflow_dispatch: # allows you to manually trigger this

jobs:
    generate-tag:
        name: 🏷️ Generate Image Tag
        runs-on: ubuntu-latest
        outputs:
            image_tag: ${{ steps.set-tag.outputs.image_tag }}

        steps:
            - name: 📦 Checkout Repo
              uses: actions/checkout@v3
              with:
                  fetch-depth: 0

            - name: 🏷️ Get Latest Tag and Generate New One
              id: set-tag
              run: |
                  latest_tag=$(git tag --sort=-v:refname | head -n 1)

                  if [[ -z "$latest_tag" ]]; then
                    latest_tag="1.0.0"
                  fi

                  base="${latest_tag%.*}"
                  patch="${latest_tag##*.}"
                  next_patch=$((patch + 1))
                  new_tag="${base}.${next_patch}"

                  echo "New tag: $new_tag"
                  echo "image_tag=$new_tag" >> $GITHUB_OUTPUT

                  # Configure Git identity
                  # git config user.name "github-actions"
                  # git config user.email "github-actions@github.com"
                  # echo "git remote set-url origin https://x-access-token:${{secrets.GCP_SSH_GITHUB_TOKEN}}@github.com/anshucodebook15/ayegree_deploy.git"
                  # git remote set-url origin "https://x-access-token:${{secrets.GCP_SSH_GITHUB_TOKEN}}@github.com/anshucodebook15/ayegree_deploy.git"
                  # git tag "v$new_tag"
                  # git push origin "v$new_tag"

    build:
        name: 🛠 Build Image -> Frontend
        runs-on: ubuntu-latest
        needs: generate-tag

        steps:
            - name: 📦 Checkout code
              uses: actions/checkout@v4

            - name: 🧾 Print tag
              run: 'echo "Using tag: ${{ needs.generate-tag.outputs.image_tag }}"'

            - name: 🐳 Login to Docker Hub
              run: echo "${{ secrets.GCP_SSH_DOCKER_PASS }}" |  docker login -u anshuldoc95 --password-stdin

            - name: 🐳 Build & Push Docker Nest Image
              working-directory: nest_ayegree
              run: |
                  npm install
                  npm run build
                  IMAGE_TAG="anshuldoc95/ayegree_nest_backend:${{ needs.generate-tag.outputs.image_tag }}"
                  docker build -t "$IMAGE_TAG" .
                  echo "Deploying version: ${{ needs.generate-tag.outputs.image_tag }}"
                  docker push "$IMAGE_TAG"

            - name: 🐳 Build & Push Docker Vite Image
              working-directory: vite_ayegree
              run: |
                  npm install
                  npm run build
                  IMAGE_TAG="anshuldoc95/ayegree_vite_backend:${{ needs.generate-tag.outputs.image_tag }}"
                  docker build -t "$IMAGE_TAG" .
                  echo "Deploying version: ${{ needs.generate-tag.outputs.image_tag }}"
                  docker push "$IMAGE_TAG"

    # deploy-via-ssh:
    #   runs-on: ubuntu-latest
    #   needs: build

    #   steps:
    #     - name: ✅ Checkout Code
    #       uses: actions/checkout@v3

    #     - name: 🔐 Setup SSH Key
    #       run: |
    #         mkdir -p ~/.ssh
    #         echo "${{ secrets.GCP_SSH_KEY }}" > ~/.ssh/id_rsa
    #         chmod 600 ~/.ssh/id_rsa
    #         ssh-keyscan -H ${{ secrets.GCP_SSH_HOST }} >> ~/.ssh/known_hosts

    #     - name: 🚀 Connect to GCP VM and Deploy with Docker Compose
    #       run: |
    #         ssh -o StrictHostKeyChecking=no ${{ secrets.GCP_SSH_USERNAME }}@${{ secrets.GCP_SSH_HOST }} << 'EOF'
    #           echo "✅ Connected to VM: $(hostname)"

    #           pwd
    #           ls

    #           # ✅ Check if Docker is installed
    #           if ! command -v docker &> /dev/null
    #           then
    #             echo "🐳 Installing Docker..."
    #             curl -fsSL https://get.docker.com -o get-docker.sh
    #             sh get-docker.sh
    #             sudo usermod -aG docker $USER
    #           fi

    #           # ✅ Check if Docker Compose is installed
    #           if ! command -v docker-compose &> /dev/null
    #           then
    #             echo "🧩 Installing Docker Compose..."
    #             sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" \
    #               -o /usr/local/bin/docker-compose
    #             sudo chmod +x /usr/local/bin/docker-compose
    #           fi

    #           # Clone repo var/www/
    #           cd /
    #           cd var/www/
    #           sudo rm -rf ayegree_deploy
    #           sudo git clone -b main "https://x-access-token:${{secrets.GCP_SSH_GITHUB_TOKEN}}@github.com/anshucodebook15/ayegree_deploy.git"

    #           # Create env
    #           cd ayegree_deploy
    #           sudo touch .env

    #           # Copy env data in tmp to ayegree_deploy/.env
    #           sudo cp /tmp/env .env

    #           # Docker Login
    #           #echo "${{ secrets.GCP_SSH_DOCKER_PASS }}" |  sudo docker login -u anshuldoc95 --password-stdin

    #           # 🛑 Stop current containers
    #           sudo docker-compose down

    #           # 🔁 Rebuild and restart containers
    #           sudo docker-compose up -d --build

    #           echo "🚀 Deployment complete"
    #         EOF
